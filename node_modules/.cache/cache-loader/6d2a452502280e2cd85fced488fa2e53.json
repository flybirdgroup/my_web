{"remainingRequest":"/Users/flybird/Desktop/my-website/my_web/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/flybird/Desktop/my-website/my_web/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/Users/flybird/Desktop/my-website/my_web/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js??ref--8-3!/Users/flybird/Desktop/my-website/my_web/blog/2020-3-19-attention.md","dependencies":[{"path":"/Users/flybird/Desktop/my-website/my_web/blog/2020-3-19-attention.md","mtime":1585902779021},{"path":"/Users/flybird/Desktop/my-website/my_web/.docusaurus/docusaurus-plugin-content-blog/site-blog-2020-3-19-attention-md-f56.json","mtime":1585902585714},{"path":"/Users/flybird/Desktop/my-website/my_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/flybird/Desktop/my-website/my_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/flybird/Desktop/my-website/my_web/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/flybird/Desktop/my-website/my_web/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2ZseWJpcmQvRGVza3RvcC9teS13ZWJzaXRlL215X3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidBdHRlbnRpb24nLHRpdGxlOiflj4zlkJHms6jmhI/liptMU1RN56We57uP572R57ucJyxhdXRob3I6J+aLm+aZk+i0pCcsYXV0aG9yX3RpdGxlOidBSSBFbmdpbmVlcicsYXV0aG9yX3VybDonaHR0cHM6Ly9naXRodWIuY29tL2ZseWJpcmRncm91cCcsYXV0aG9yX2ltYWdlX3VybDonaHR0cHM6Ly9zczMuYmRzdGF0aWMuY29tLzcwY0Z2OFNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTE2MTU3Mzg2MDEsMTQzNDQzNjAzNiZmbT0yNiZncD0wLmpwZycsdGFnczpbJ0NOTicsJ2NsYXNzaWZpZXInLCd0ZXh0Q05OJ119O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17InBlcm1hbGluayI6Ii9ibG9nL0F0dGVudGlvbiIsInNvdXJjZSI6IkBzaXRlL2Jsb2cvMjAyMC0zLTE5LWF0dGVudGlvbi5tZCIsImRlc2NyaXB0aW9uIjoiIyMg5Y6f55CG6K6y6KejIiwiZGF0ZSI6IjIwMjAtMDMtMThUMTY6MDA6MDAuMDAwWiIsInRhZ3MiOlt7ImxhYmVsIjoiQ05OIiwicGVybWFsaW5rIjoiL2Jsb2cvdGFncy9jbm4ifSx7ImxhYmVsIjoiY2xhc3NpZmllciIsInBlcm1hbGluayI6Ii9ibG9nL3RhZ3MvY2xhc3NpZmllciJ9LHsibGFiZWwiOiJ0ZXh0Q05OIiwicGVybWFsaW5rIjoiL2Jsb2cvdGFncy90ZXh0LWNubiJ9XSwidGl0bGUiOiLlj4zlkJHms6jmhI/liptMU1RN56We57uP572R57ucIiwidHJ1bmNhdGVkIjp0cnVlLCJwcmV2SXRlbSI6eyJ0aXRsZSI6IkNyZWF0ZSBWaXJ0dWFsIExpbnV4IGJ5IEdvb2dsZSDliJvlu7psaW51eOiZmuaLn+acuiIsInBlcm1hbGluayI6Ii9ibG9nL2NyZWF0ZWxpbnV4In0sIm5leHRJdGVtIjp7InRpdGxlIjoid29yZDJ2ZWPor6bop6MiLCJwZXJtYWxpbmsiOiIvYmxvZy9lbG1vIn19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J+WOn+eQhuiusuinoycsaWQ6J+WOn+eQhuiusuinoycsY2hpbGRyZW46W119LHt2YWx1ZTon57uG55yL57uT5p6EJyxpZDon57uG55yL57uT5p6EJyxjaGlsZHJlbjpbe3ZhbHVlOifovpPlhaXlsYInLGlkOifovpPlhaXlsYInLGNoaWxkcmVuOltdfSx7dmFsdWU6J0JpLUxTVE0nLGlkOidiaS1sc3RtJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J+aJk+S5seagt+acrCcsaWQ6J+aJk+S5seagt+acrCcsY2hpbGRyZW46W119LHt2YWx1ZTon5oqA5pyv6Lev57q/JyxpZDon5oqA5pyv6Lev57q/JyxjaGlsZHJlbjpbXX0se3ZhbHVlOifmn6XnnIvmmK/lkKbmnInnvLrlpLHlgLwnLGlkOifmn6XnnIvmmK/lkKbmnInnvLrlpLHlgLwnLGNoaWxkcmVuOltdfSx7dmFsdWU6J+WIhuaekOagh+etvuaVsOaNruaDheWGtScsaWQ6J+WIhuaekOagh+etvuaVsOaNruaDheWGtScsY2hpbGRyZW46W3t2YWx1ZTon5p+l55yL5q+P5Liq5paH5pys55qE6ZW/5bqmJyxpZDon5p+l55yL5q+P5Liq5paH5pys55qE6ZW/5bqmJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J+W+l+WIsOWPpeWtkOmVv+W6picsaWQ6J+W+l+WIsOWPpeWtkOmVv+W6picsY2hpbGRyZW46W119LHt2YWx1ZTonamllYmHliIbor40nLGlkOidqaWViYeWIhuivjScsY2hpbGRyZW46W119LHt2YWx1ZTon6I635Y+W5YGc55So6K+N5ZKM6K6+56uL5YiG6K+N5Ye95pWwJyxpZDon6I635Y+W5YGc55So6K+N5ZKM6K6+56uL5YiG6K+N5Ye95pWwJyxjaGlsZHJlbjpbXX0se3ZhbHVlOiflu7rnq4vmqKHlnosnLGlkOiflu7rnq4vmqKHlnosnLGNoaWxkcmVuOlt7dmFsdWU6J0F0dGVudGlvbue9kee7nCcsaWQ6J2F0dGVudGlvbue9kee7nCcsY2hpbGRyZW46W119LHt2YWx1ZTon572R57uc57uT5p6EJyxpZDon572R57uc57uT5p6EJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidlbG1v5bGCJyxpZDonZWxtb+WxgicsY2hpbGRyZW46W119LHt2YWx1ZTon5Yib5bu6cGFkZGluZ+WHveaVsCcsaWQ6J+WIm+W7unBhZGRpbmflh73mlbAnLGNoaWxkcmVuOltdfSx7dmFsdWU6J+WIm+W7uuaJuemHj+eUn+aIkOWZqCcsaWQ6J+WIm+W7uuaJuemHj+eUn+aIkOWZqCcsY2hpbGRyZW46W119LHt2YWx1ZTon5p6E5bu6RUxNT1RleHRCaVJOTue9kee7nOe7k+aehCcsaWQ6J+aehOW7umVsbW90ZXh0Ymlybm7nvZHnu5znu5PmnoQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J+iuvue9ruaooeWei+WPguaVsCcsaWQ6J+iuvue9ruaooeWei+WPguaVsCcsY2hpbGRyZW46W119LHt2YWx1ZTon6I635Y+W5qih5Z6LJyxpZDon6I635Y+W5qih5Z6LJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J+WIkuWIhuiuree7g+mbhizmtYvor5Xpm4YnLGlkOifliJLliIborq3nu4Ppm4bmtYvor5Xpm4YnLGNoaWxkcmVuOltdfSx7dmFsdWU6J+W7uueri+ivjeWFuCzor43or61pZOWMlizmoIfnrb7ni6zng63nvJbnoIEnLGlkOiflu7rnq4vor43lhbjor43or61pZOWMluagh+etvueLrOeDree8lueggScsY2hpbGRyZW46W119LHt2YWx1ZTon6K6+56uL5pep5YGcJyxpZDon6K6+56uL5pep5YGcJyxjaGlsZHJlbjpbXX0se3ZhbHVlOifmtYvor5XmqKHlnosnLGlkOifmtYvor5XmqKHlnosnLGNoaWxkcmVuOltdfV07Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDIiLHsiaWQiOiLljp/nkIborrLop6MifSxg5Y6f55CG6K6y6KejYCksbWR4KCJwIixudWxsLGBUZXh0QXR0QmlSTk7mmK/lnKjlj4zlkJFMU1RN5paH5pys5YiG57G75qih5Z6L55qE5Z+656GA5LiK5pS56L+b55qE77yM5Li76KaB5piv5byV5YWl5LqG5rOo5oSP5Yqb5py65Yi277yIQXR0ZW50aW9u77yJ44CC5a+55LqO5Y+M5ZCRTFNUTee8lueggeW+l+WIsOeahOihqOW+geWQkemHj++8jOaooeWei+iDveWkn+mAmui/h+azqOaEj+WKm+acuuWItu+8jOWFs+azqOS4juWGs+etluacgOebuOWFs+eahOS/oeaBr+OAguWFtuS4reazqOaEj+WKm+acuuWItuacgOWFiOWcqOiuuuaWhyBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2FyeGl2Lm9yZy9wZGYvMTQwOS4wNDczLnBkZiJ9KSxgTmV1cmFsIE1hY2hpbmUgVHJhbnNsYXRpb24gYnkgSm9pbnRseSBMZWFybmluZyB0byBBbGlnbiBhbmQgVHJhbnNsYXRlYCksYCDkuK3ooqvmj5Dlh7rvvIzogIzmraTlpITlr7nkuo7ms6jmhI/lipvmnLrliLbnmoTlrp7njrDlj4LnhafkuoborrrmlocgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzE1MTIuMDg3NTYucGRmIn0pLGBGZWVkLUZvcndhcmQgTmV0d29ya3Mgd2l0aCBBdHRlbnRpb24gQ2FuIFNvbHZlIFNvbWUgTG9uZy1UZXJtIE1lbW9yeSBQcm9ibGVtc2ApLGDjgIJgKSxtZHgoInAiLG51bGwsYOazqOaEj+WKm+acuuWItuWPguiAg2ApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL3podWFubGFuLnpoaWh1LmNvbS9wLzM3NjAxMTYxIn0pLGDmt7HluqblrabkuaDkuK3nmoTms6jmhI/lipvmqKHlnotgKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL3podWFubGFuLnpoaWh1LmNvbS9wLzUzMDM2MDI4In0pLGDmt7HluqblrabkuaDms6jmhI/lipvmnLrliLZgKSkpLG1keCgicCIsbnVsbCxg6K+35rOo5oSPLOi/memHjOeahOazqOaEj+WKm+acuuWItuS4jmJlcnTkuK10cmFuc2Zvcm1lcueahOazqOaEj+WKm+acuuWItuS4jeWQjCx0cmFuc2Zvcm1lcuS8muabtOWKoOWkjeadgizlpKflrrblj6/ku6Xlj4LogIPmiJHlhbPkuo5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vd2VpamlhbmcyMDA5L1VSdW4uUmVzZWFyY2hQcm90b3R5cGUvdHJlZS9kZXYvUGVvcGxlL1hpYW94aWFuL05MUCVFNSU5RiVCQSVFNyVBMSU4MCVFNyU5RiVBNSVFOCVBRiU4NiVFNiU5NSVCNCVFNyU5MCU4Ni9UcmFuc2Zvcm1lciVFNyVBQyU5NCVFOCVBRSVCMCJ9KSxgdHJhbnNmb3JtZXJgKSksbWR4KCJwIixudWxsLGBJbiB0aGUgcGFwZXIgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzE1MTIuMDg3NTYucGRmIn0pLGBGZWVkLUZvcndhcmQgTmV0d29ya3Mgd2l0aCBBdHRlbnRpb24gQ2FuIFNvbHZlIFNvbWUgTG9uZy1UZXJtIE1lbW9yeSBQcm9ibGVtc2ApLGAsIHRoZSBgLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGBmZWVkIGZvcndhcmQgYXR0ZW50aW9uYCksYCBpcyBzaW1wbGlmaWVkIGFzIGZvbGxvd3MsCmAsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIuLi9pbWcvYXR0ZW50aW9uL0ZlZWRGb3J3YXJkQXR0ZW50aW9uLnBuZyIsImFsdCI6InBuZyJ9KSkpLG1keCgicCIsbnVsbCxgRnVuY3Rpb24gYSwgYSBsZWFybmFibGUgZnVuY3Rpb24sIGlzIHJlY29nbml6ZWQgYXMgYSBmZWVkIGZvcndhcmQgbmV0d29yay4gSW4gdGhpcyBmb3JtdWxhdGlvbiwgYXR0ZW50aW9uIGNhbiBiZSBzZWVuIGFzIHByb2R1Y2luZyBhIGZpeGVkLWxlbmd0aCBlbWJlZGRpbmcgYyBvZiB0aGUgaW5wdXQgc2VxdWVuY2UgYnkgY29tcHV0aW5nIGFuIGFkYXB0aXZlIHdlaWdodGVkIGF2ZXJhZ2Ugb2YgdGhlIHN0YXRlIHNlcXVlbmNlIGguYCksbWR4KCJwIixudWxsLGBj5bCx5piv5rOo5oSP5YqbLGFscGhh5bCx5piv5p2D6YeNLGjlsLHmmK/pmpDlkKvnirbmgIEsYWxwaGHpgJrov4dzb2Z0bWF46K6h566XLHNjb3Jl5bCx5piv6YCa6L+HaOiuoeeul+eahCxo5bCx5piv5b2T5YmN54q25oCB6L6T5YWl55qE6K+N6K+t5ZKM5LiK5LiA6ZqQ5ZCr54q25oCBaHQtMeiuoeeul+iAjOadpeeahGApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii4uL2ltZy9hdHRlbnRpb24vRmVlZEZvcndhcmRBdHRldGlvbl9mb211bGFyLnBuZyIsImFsdCI6InBuZyJ9KSkpLG1keCgiaDIiLHsiaWQiOiLnu4bnnIvnu5PmnoQifSxg57uG55yL57uT5p6EYCksbWR4KCJwIixudWxsLGBUZXh0QXR0QmlSTk4g55qE572R57uc57uT5p6ECmAsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIuLi9pbWcvYXR0ZW50aW9uL3RleHQtYXR0bi1iaXJubi5wbmciLCJhbHQiOiJwbmcifSkpKSxtZHgoImgzIix7ImlkIjoi6L6T5YWl5bGCIn0sYOi+k+WFpeWxgmApLG1keCgicCIsbnVsbCxg6L6T5YWl5bGC5oiR5Lus5Y+v5Lul5a6a5LmJ5Li65Y+l5a2Q6L6T5YWl6ZW/5bqm77yM5q+P5Liq6K+N57uP6L+H5LiA5LiqZW1iZWRkaW5nX2RpbT01MOeahGVtYmVkZGluZ+efqemYte+8jOacgOe7iOi+k+WHujQwMMOXNTDnmoTooajnpLrnn6npmLUu5YGH6K6+5LiA5Liq5Y+l5a2Q5pyJNDAw5Liq6K+N6K+tYCksbWR4KCJoMyIseyJpZCI6ImJpLWxzdG0ifSxgQmktTFNUTWApLG1keCgicCIsbnVsbCxgQmktTFNUTeWxguS9nOS4uuS4gOenjeeJueW+gee8lueggeWxgu+8jOi/meWxguWPr+S7peaPkOWPluavj+S4quivjeivreeahOS4iuS4i+aWh+eJueW+ge+8jOeEtuWQjuWwhuWPjOWQkeeahOeJueW+gei/m+ihjOaLvOaOpe+8jOeEtuWQjuS+neaXp+Wwhuavj+S4quivjeivreeahOeJueW+gei/m+ihjOi+k+WHuu+8jOWboOatpOi+k+WHuuS4ujQwMMOXMjU255qE54m55b6B55+p6Zi1YCksbWR4KCJwIixudWxsLGBBdHRlbnRpb27lsYIKQXR0ZW50aW9u5bGC5a+56L+Z5Liq572R57uc5Lit5a+55q+P5Liq6K+N6K+t6L+b6KGM5LqG5Yqg5p2D5rGC5ZKM77yM6L+Z5Liq5p2D6YeN5piv6YCa6L+H6K6t57uD5LiN5pat6K6t57uD5Ye65p2l55qE77yM6L+Z5bGC5oiR5Lus55qE6L6T5YWleOS4ujQwMMOXMjU277yM5oiR5Lus5Yid5aeL5YyW5p2D6YeN55+p6Zi1V+S4ujI1NsOXMee7tO+8jOeEtuWQjuWvuXjkuI5X6L+b6KGM54K55LmY44CB5b2S5LiA5YyW77yI5YWs5byP55qE5YmN5Lik5Liq77yJ77yM6L+Z5qC35bCx5Y+v5Lul5b6X5YiwNDAww5cx55qE55+p6Zi1Ye+8jOi/meS4quefqemYteS7o+ihqOeahOaYr+avj+S4quivjeWvueW6lOeahOadg+mHje+8jOadg+mHjeWkp+eahOivjeS7o+ihqOazqOaEj+WKm+Wkp+eahO+8jOi/meS4quivjeeahOi0oeeMrueoi+W6puabtOWkp++8jOacgOWQjuWvueavj+S4quivjeivrei/m+ihjOWKoOadg+W5s+Wdh++8jGFU5LiOeOi/m+ihjOeCueS5mO+8jOW+l+WIsDHDlzI1Nu+8jOi/meaYr+acgOe7iOWKoOadg+W5s+Wdh+WQjui+k+WHuueahOaAu+eJueW+geWQkemHj+OAgmApLG1keCgicCIsbnVsbCxg6L6T5Ye65bGCCuS4juaIkeS5i+WJjXRleHRDTk7lgZrkuK3mlofmlrDpl7vliIbnsbvlrp7pqozlt67kuI3lpJrvvIzkvb/nlKjlhajov57mjqXlsYLvvIxzb2Z0bWF45L2c5Li65r+A5rS75Ye95pWw6L+b6KGM6L6T5Ye644CCYCksbWR4KCJwIixudWxsLGBkZW1v6aG555uuOiBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vZmx5YmlyZGdyb3VwL3NlbnRpbWVudF9hbmFseXNpcyJ9KSxg5oOF5oSf5YiG5p6QYCkpLG1keCgiaDEiLHsiaWQiOiLlr7zlhaXlt6XlhbfljIUifSxg5a+85YWl5bel5YW35YyFYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYGltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IGppZWJhX2Zhc3QgYXMgamllYmEKZnJvbSB0ZW5zb3JmbG93LmtlcmFzLmxheWVycyBpbXBvcnQgTGF5ZXIKZnJvbSB0ZW5zb3JmbG93LmtlcmFzIGltcG9ydCBiYWNrZW5kIGFzIEsKZnJvbSB0ZW5zb3JmbG93LmtlcmFzIGltcG9ydCBpbml0aWFsaXplcnMscmVndWxhcml6ZXJzLGNvbnN0cmFpbnRzCmZyb20gdGVuc29yZmxvdy5rZXJhcyBpbXBvcnQgSW5wdXQsTW9kZWwsbW9kZWxzCmZyb20gdGVuc29yZmxvdy5rZXJhcy5sYXllcnMgaW1wb3J0IEVtYmVkZGluZywgRGVuc2UsIENvbnYxRCwgR2xvYmFsTWF4UG9vbGluZzFELCBDb25jYXRlbmF0ZSwgRHJvcG91dApmcm9tIHRlbnNvcmZsb3cua2VyYXMgaW1wb3J0IElucHV0LE1vZGVsCmZyb20gdGVuc29yZmxvdy5rZXJhcy5sYXllcnMgaW1wb3J0IEVtYmVkZGluZyxEcm9wb3V0LERlbnNlLEJpZGlyZWN0aW9uYWwsTFNUTQpmcm9tIHRlbnNvcmZsb3cua2VyYXMubW9kZWxzIGltcG9ydCBsb2FkX21vZGVsCmZyb20gZWxtb2Zvcm1hbnlsYW5ncyBpbXBvcnQgRW1iZWRkZXIKaW1wb3J0IG51bXB5IGFzIG5wCmZyb20gdGVuc29yZmxvdy5rZXJhcy51dGlscyBpbXBvcnQgcGxvdF9tb2RlbApmcm9tIHNrbGVhcm4ubW9kZWxfc2VsZWN0aW9uIGltcG9ydCB0cmFpbl90ZXN0X3NwbGl0CmZyb20gdGVuc29yZmxvdy5rZXJhcy51dGlscyBpbXBvcnQgdG9fY2F0ZWdvcmljYWwKZnJvbSB0ZW5zb3JmbG93LmtlcmFzLmNhbGxiYWNrcyBpbXBvcnQgRWFybHlTdG9wcGluZywgTW9kZWxDaGVja3BvaW50CmZyb20gcGFuZGFyYWxsZWwgaW1wb3J0IHBhbmRhcmFsbGVsCnBhbmRhcmFsbGVsLmluaXRpYWxpemUoKQpmcm9tIHRlbnNvcmZsb3cua2VyYXMucHJlcHJvY2Vzc2luZy50ZXh0IGltcG9ydCBUb2tlbml6ZXIKYCkpLG1keCgiaDEiLHsiaWQiOiLor7vlj5bmlbDmja4ifSxg6K+75Y+W5pWw5o2uYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYGRmID0gcGQucmVhZF9jc3YoJy4vZGF0YS9zZW50aW1lbnRfYW5hbHlzaXNfZGF0YS5jc3YnLHNlcD0nICcpCmRmCmApKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIuLi9pbWcvYXR0ZW50aW9uLzEucG5nIiwiYWx0IjoicG5nIn0pKSksbWR4KCJoMiIseyJpZCI6IuaJk+S5seagt+acrCJ9LGDmiZPkubHmoLfmnKxgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgZGYgPSBkZi5zYW1wbGUoZnJhYz0xKS5yZXNldF9pbmRleChkcm9wPVRydWUpCmApKSxtZHgoImgxIix7ImlkIjoi5bu65qih5oCd6LevIn0sYOW7uuaooeaAnei3r2ApLG1keCgiaDIiLHsiaWQiOiLmioDmnK/ot6/nur8ifSxg5oqA5pyv6Lev57q/YCksbWR4KCJwIixudWxsLGDliIbkuKTnp43np43mg4XlhrUs5aW96K+ELOi0n+ivhCzkuK3or4QK6K6h566X6Lev57q/OgoxIOS9v+eUqFRleHRDTk7lr7nmr4/kuKrlj6XlrZDnsbvkvLxuLWdyYW3lpITnkIZgKSxtZHgoInAiLG51bGwsYDIg5L2/55SoUk5OYCksbWR4KCJwIixudWxsLGAzIOWPr+S7peWwneivleS9v+eUqGF0dGVudGlvbuacuuWItuWBmuaDheaEn+WIpOaWrSzlr7nor43ov5vooYx3b3JkMnZlYyzmiJbogIVlbG1vIGVtYmVkZGluZyzlj6/mt7vliqBiaS1sc3Rt6I635Y+W5LiK5LiL5paH5L+h5oGvYCksbWR4KCJwIixudWxsLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3d3dy54bi0tZ21xcjM4YWxvZ3h0MmEubmV0L2Jsb2cvQXR0ZW50aW9uIn0pLGBBdHRlbnRpb27ljp/nkIbor7flj4LogINgKSksbWR4KCJoMiIseyJpZCI6Iuafpeeci+aYr+WQpuaciee8uuWkseWAvCJ9LGDmn6XnnIvmmK/lkKbmnInnvLrlpLHlgLxgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgZGYuaW5mbygpCmApKSxtZHgoImgyIix7ImlkIjoi5YiG5p6Q5qCH562+5pWw5o2u5oOF5Ya1In0sYOWIhuaekOagh+etvuaVsOaNruaDheWGtWApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBsYWJlbF9kaWN0ID0geyctMSc6J+i0n+ivhCcsJzAnOifkuK3or4QnLCcxJzon5q2j6K+EJ30KCmRmWydsYWJlbCddPWRmWydsYWJlbCddLmFwcGx5KGxhbWJkYSB4OiBsYWJlbF9kaWN0W3N0cih4KV0gKQpgKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYGRmLnRhaWwoKQpgKSksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiLi4vaW1nL2F0dGVudGlvbi8yLnBuZyIsImFsdCI6InBuZyJ9KSkpLG1keCgiaDMiLHsiaWQiOiLmn6XnnIvmr4/kuKrmlofmnKznmoTplb/luqYifSxg5p+l55yL5q+P5Liq5paH5pys55qE6ZW/5bqmYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYGRmWyd0eHRfbnVtJ10gPSBkZlsndHh0J10uYWdnKGxhbWJkYSB4OiBsZW4oeCkpCmApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgZGYuYWdnKHsndHh0X251bSc6J21lYW4nfSkKYCkpLG1keCgiaDIiLHsiaWQiOiLlvpfliLDlj6XlrZDplb/luqYifSxg5b6X5Yiw5Y+l5a2Q6ZW/5bqmYCksbWR4KCJwIixudWxsLGDmiYDku6XmoLnmja7mlbDmja4s5b6X5Ye65oiR5Lus5Lya6K6+572ubWF4bGVuPSA0MOW3puWPs2ApLG1keCgiaDIiLHsiaWQiOiJqaWViYeWIhuivjSJ9LGBqaWViYeWIhuivjWApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBmcm9tIHBhbmRhcmFsbGVsIGltcG9ydCBwYW5kYXJhbGxlbApwYW5kYXJhbGxlbC5pbml0aWFsaXplKCkKYCkpLG1keCgiaDIiLHsiaWQiOiLojrflj5blgZznlKjor43lkozorr7nq4vliIbor43lh73mlbAifSxg6I635Y+W5YGc55So6K+N5ZKM6K6+56uL5YiG6K+N5Ye95pWwYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYHN0b3B3b3JkcyA9IHBkLnJlYWRfY3N2KCcuL2RhdGEvc3RvcHdvcmRzLnR4dCcsc2VwPSdcXHQnLGluZGV4X2NvbD1GYWxzZSxxdW90aW5nPTMsZW5jb2Rpbmc9J3V0Zi04JykKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBkZWYgc3BsaXRfd29yZHMoWCk6CiAgICByZXN1bHQgPSBbaSBmb3IgaSBpbiBqaWViYS5sY3V0KFgpIGlmIGkgbm90IGluIHN0b3B3b3Jkc10KICAgIHJlc3VsdCA9ICcgJy5qb2luKHJlc3VsdCkKICAgIHJldHVybiByZXN1bHQKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBkZlsndHh0J109ZGZbJ3R4dCddLnBhcmFsbGVsX2FwcGx5KHNwbGl0X3dvcmRzKQpgKSksbWR4KCJoMiIseyJpZCI6IuW7uueri+aooeWeiyJ9LGDlu7rnq4vmqKHlnotgKSxtZHgoImgzIix7ImlkIjoiYXR0ZW50aW9u572R57ucIn0sYEF0dGVudGlvbue9kee7nGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBjbGFzcyBBdHRlbnRpb24oTGF5ZXIpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0ZXBfZGltLAogICAgICAgICAgICAgICAgIFdfcmVndWxhcml6ZXI9Tm9uZSwgYl9yZWd1bGFyaXplcj1Ob25lLAogICAgICAgICAgICAgICAgIFdfY29uc3RyYWludD1Ob25lLCBiX2NvbnN0cmFpbnQ9Tm9uZSwKICAgICAgICAgICAgICAgICBiaWFzPVRydWUsICoqa3dhcmdzKToKICAgICAgICBzZWxmLnN1cHBvcnRzX21hc2tpbmcgPSBUcnVlCiAgICAgICAgc2VsZi5pbml0ID0gaW5pdGlhbGl6ZXJzLmdldCgnZ2xvcm90X3VuaWZvcm0nKQoKICAgICAgICBzZWxmLldfcmVndWxhcml6ZXIgPSByZWd1bGFyaXplcnMuZ2V0KFdfcmVndWxhcml6ZXIpCiAgICAgICAgc2VsZi5iX3JlZ3VsYXJpemVyID0gcmVndWxhcml6ZXJzLmdldChiX3JlZ3VsYXJpemVyKQoKICAgICAgICBzZWxmLldfY29uc3RyYWludCA9IGNvbnN0cmFpbnRzLmdldChXX2NvbnN0cmFpbnQpCiAgICAgICAgc2VsZi5iX2NvbnN0cmFpbnQgPSBjb25zdHJhaW50cy5nZXQoYl9jb25zdHJhaW50KQoKICAgICAgICBzZWxmLmJpYXMgPSBiaWFzCiAgICAgICAgc2VsZi5zdGVwX2RpbSA9IHN0ZXBfZGltCiAgICAgICAgc2VsZi5mZWF0dXJlc19kaW0gPSAwCgogICAgICAgIHN1cGVyKEF0dGVudGlvbiwgc2VsZikuX19pbml0X18oKiprd2FyZ3MpCgogICAgZGVmIGJ1aWxkKHNlbGYsIGlucHV0X3NoYXBlKToKICAgICAgICBhc3NlcnQgbGVuKGlucHV0X3NoYXBlKSA9PSAzCgogICAgICAgIHNlbGYuVyA9IHNlbGYuYWRkX3dlaWdodChzaGFwZT0oaW5wdXRfc2hhcGVbLTFdLCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVyPXNlbGYuaW5pdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ne31fVycuZm9ybWF0KHNlbGYubmFtZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJpemVyPXNlbGYuV19yZWd1bGFyaXplciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludD1zZWxmLldfY29uc3RyYWludCkKICAgICAgICBzZWxmLmZlYXR1cmVzX2RpbSA9IGlucHV0X3NoYXBlWy0xXQoKICAgICAgICBpZiBzZWxmLmJpYXM6CiAgICAgICAgICAgIHNlbGYuYiA9IHNlbGYuYWRkX3dlaWdodChzaGFwZT0oaW5wdXRfc2hhcGVbMV0sKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVyPSd6ZXJvJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9J3t9X2InLmZvcm1hdChzZWxmLm5hbWUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVndWxhcml6ZXI9c2VsZi5iX3JlZ3VsYXJpemVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludD1zZWxmLmJfY29uc3RyYWludCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmIgPSBOb25lCgogICAgICAgIHNlbGYuYnVpbHQgPSBUcnVlCiAgICAKICAgIGRlZiBjb21wdXRlX21hc2soc2VsZixpbnB1dCxpbnB1dF9tYXNrPU5vbmUpOgogICAgICAgICNkbyBub3QgcGFzcyB0aGUgbWFzayB0byB0aGUgbmV4dCBsYXllcnMKICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgY2FsbChzZWxmLHgsbWFzaz1Ob25lKToKICAgICAgICBmZWF0dXJlc19kaW0gPSBzZWxmLmZlYXR1cmVzX2RpbQogICAgICAgIHN0ZXBfZGltID0gc2VsZi5zdGVwX2RpbQogICAgICAgIAogICAgICAgICNLLnJlc2hhcGUoeCwoLTEsZmVhdHVyZXNfZGltKSnph4zpnaItMeWPr+S7peaDs+ixoeaIkOS4gOihjCxmZWF0dXJlc19kaW3lj5jmiJDkuIDooYzmnIlmZWF0dXJlc19kaW3nu7Tnn6npmLUoMSpkaW3nu7QpLEsucmVzaGFwZShzZWxmLlcsIChmZWF0dXJlc19kaW0sIDEpKSzlj5jmiJDnn6npmLUoZGlt57u0KnNlbGYuVylmZWF0dXJlc19kaW3ooYzlkowx57u0CiAgICAgICAgZSA9IEsucmVzaGFwZShLLmRvdChLLnJlc2hhcGUoeCwgKC0xLCBmZWF0dXJlc19kaW0pKSwgSy5yZXNoYXBlKHNlbGYuVywgKGZlYXR1cmVzX2RpbSwgMSkpKSwgKC0xLCBzdGVwX2RpbSkpICAKICAgICAgICAjIOi/memHjOS5n+WPr+S7peeUqOWPpuWkluS4gOenjeihqOekuuaWueW8jwojICAgICAgICAgZSA9IEsucmVzaGFwZShLLmRvdChLLnJlc2hhcGUoeCwoMSwtMSkpLEsucmVzaGFwZShzZWxmLlcsKC0xLDEpKSksKC0xLDEpKQogICAgICAgICMg5YW25a6e5bCx5piv5YWo6L+e5o6l55qE55+p6Zi155u45LmYIGUgPSBLLmRvdCh4LCBzZWxmLlcpCiAgICAgICAgaWYgc2VsZi5iaWFzOgogICAgICAgICAgICBlICs9IHNlbGYuYgogICAgICAgIGUgPSBLLnRhbmgoZSkgIyDmv4DmtLvlh73mlbAKICAgICAgICBhID0gSy5leHAoZSkgIyDljrvmjIfmlbAKICAgICAgICAjIGFwcGx5IG1hc2sgYWZ0ZXIgdGhlIGV4cC4gd2lsbCBiZSByZS1ub3JtYWxpemVkIG5leHQKICAgICAgICBpZiBtYXNrIGlzIG5vdCBOb25lOgogICAgICAgICAgICAjIGNhc3QgdGhlIG1hc2sgdG8gZmxvYXRYIHRvIGF2b2lkIGZsb2F0NjQgdXBjYXN0aW5nIGluIHRoZWFubwogICAgICAgICAgICBhICo9IEsuY2FzdChtYXNrLCBLLmZsb2F0eCgpKSAjIOi9rOaNouaIkGZsb2F0eOexu+WeiwogICAgICAgICMgaW4gc29tZSBjYXNlcyBlc3BlY2lhbGx5IGluIHRoZSBlYXJseSBzdGFnZXMgb2YgdHJhaW5pbmcgdGhlIHN1bSBtYXkgYmUgYWxtb3N0IHplcm8KICAgICAgICAjIGFuZCB0aGlzIHJlc3VsdHMgaW4gTmFOJ3MuIEEgd29ya2Fyb3VuZCBpcyB0byBhZGQgYSB2ZXJ5IHNtYWxsIHBvc2l0aXZlIG51bWJlciDOtSB0byB0aGUgc3VtLgogICAgICAgIGEgLz0gSy5jYXN0KEsuc3VtKGEsIGF4aXM9MSwga2VlcGRpbXM9VHJ1ZSkgKyBLLmVwc2lsb24oKSwgSy5mbG9hdHgoKSkgIyBzb2Z0bWF45Ye95pWwLOW+l+WIsOadg+mHjeefqemYtQogICAgICAgIGEgPSBLLmV4cGFuZF9kaW1zKGEpICMg5Y+Y5oiQKGRpbSwxKSzov5nmoLflj6/ku6XkuI546L+b6KGM5Yqg5p2D5bCx5ZKM5b6X5YiwY29udGV4dAogICAgICAgIAogICAgICAgIGMgPSBLLnN1bShhKngsYXhpcz0xKSAj5p2D6YeN5LiOaGlkZGVu5L+h5oGv5Yqg5p2D5bCx5ZKM5b6X5YiwY29udGV4dCzkuZ/lsLHmmK/miJHku6znmoTms6jmhI/lipsKICAgICAgICByZXR1cm4gYwogICAgZGVmIGNvbXB1dGVfb3V0cHV0X3NoYXBlKHNlbGYsIGlucHV0X3NoYXBlKToKICAgICAgICByZXR1cm4gaW5wdXRfc2hhcGVbMF0sIHNlbGYuZmVhdHVyZXNfZGltICAKICAgIAogICAgZGVmIGdldF9jb25maWcoc2VsZik6CiAgICAgICAgY29uZmlnID0gewogICAgICAgICAgICAgICAgInN0ZXBfZGltIjpzZWxmLnN0ZXBfZGltLAogICAgICAgICAgICAgICAgICJXX3JlZ3VsYXJpemVyIjpzZWxmLldfcmVndWxhcml6ZXIsICJiX3JlZ3VsYXJpemVyIjpzZWxmLmJfcmVndWxhcml6ZXIsCiAgICAgICAgICAgICAgICAgIldfY29uc3RyYWludCI6c2VsZi5XX2NvbnN0cmFpbnQsICJiX2NvbnN0cmFpbnQiOnNlbGYuYl9jb25zdHJhaW50LAogICAgICAgICAgICAgICAgICJiaWFzIjpzZWxmLmJpYXN9CiAgICAgICAgYmFzZV9jb25maWcgPSBzdXBlcihBdHRlbnRpb24sIHNlbGYpLmdldF9jb25maWcoKQogICAgICAgIHJldHVybiBkaWN0KGxpc3QoYmFzZV9jb25maWcuaXRlbXMoKSkgKyBsaXN0KGNvbmZpZy5pdGVtcygpKSkKYCkpLG1keCgiaDMiLHsiaWQiOiLnvZHnu5znu5PmnoQifSxg572R57uc57uT5p6EYCksbWR4KCJoMyIseyJpZCI6ImVsbW/lsYIifSxgZWxtb+WxgmApLG1keCgicCIsbnVsbCxg5ZOI5bel5aSn5byA5Y+R55qE5Yqo5oCB6K+N5ZCR6YePYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL0hJVC1TQ0lSL0VMTW9Gb3JNYW55TGFuZ3MifSksYGVsbW9gKSksbWR4KCJwIixudWxsLGBlbG1v5Y6f55CG5Y+v5Y+C6ICDYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yZmZmNTM2OTZmYWMifSksYOmTvuaOpWApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgZSA9IEVtYmVkZGVyKCcuL3pocy5tb2RlbC8nKQpgKSksbWR4KCJoMyIseyJpZCI6IuWIm+W7unBhZGRpbmflh73mlbAifSxg5Yib5bu6cGFkZGluZ+WHveaVsGApLG1keCgicCIsbnVsbCxg6LaF6L+H5Y+l5a2Q6ZW/5bqm5bCx5oiq5Y+WLOS4jeWkn+WwseihpeepumApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBkZWYgcGFkX3NlbnQoeCwgbWF4X2xlbik6CiAgICBpZiBsZW4oeCk+bWF4X2xlbjoKICAgICAgICByZXR1cm4geFs6bWF4X2xlbl0KICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHgrWycnXSoobWF4X2xlbi1sZW4oeCkpCmApKSxtZHgoImgzIix7ImlkIjoi5Yib5bu65om56YeP55Sf5oiQ5ZmoIn0sYOWIm+W7uuaJuemHj+eUn+aIkOWZqGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBkZWYgYmF0Y2hfZ2VuZXJhdG9yKHgsIHksIGJhdGNoX3NpemU9NjQpOgogICAgbl9iYXRjaGVzX3Blcl9lcG9jaCA9IGxlbih4KS8vYmF0Y2hfc2l6ZQogICAgZm9yIGkgaW4gcmFuZ2Uobl9iYXRjaGVzX3Blcl9lcG9jaCk6CiAgICAgICAgeF9iYXRjaCA9IG5wLmFycmF5KGUuc2VudHMyZWxtbyhbcGFkX3NlbnQoc2VudCw0MCkgZm9yIHNlbnQgaW4geFtiYXRjaF9zaXplKmk6YmF0Y2hfc2l6ZSooaSsxKV1dKSkKICAgICAgICB5X2JhdGNoID0geVtiYXRjaF9zaXplKmk6YmF0Y2hfc2l6ZSooaSsxKSw6XQogICAgICAgIHlpZWxkIHhfYmF0Y2gsIG5wLmFycmF5KHlfYmF0Y2gpCmApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgZGVmIHByZWRpY3RfZ2VuZXJhdG9yKHgsIGJhdGNoX3NpemU9MSk6ICPpooTmtYsKICAgIG5fYmF0Y2hlc19wZXJfZXBvY2ggPSBsZW4oeCkvL2JhdGNoX3NpemUKICAgIGZvciBpIGluIHJhbmdlKG5fYmF0Y2hlc19wZXJfZXBvY2gpOgogICAgICAgIHhfYmF0Y2ggPSBucC5hcnJheShlLnNlbnRzMmVsbW8oW3BhZF9zZW50KHNlbnQsNDApIGZvciBzZW50IGluIHhbYmF0Y2hfc2l6ZSppOmJhdGNoX3NpemUqKGkrMSldXSkpCiAgICAgICAgeWllbGQgeF9iYXRjaApgKSksbWR4KCJoMyIseyJpZCI6IuaehOW7umVsbW90ZXh0Ymlybm7nvZHnu5znu5PmnoQifSxg5p6E5bu6RUxNT1RleHRCaVJOTue9kee7nOe7k+aehGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBjbGFzcyBFTE1PVGV4dEJpUk5OKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZixtYXhsZW4sbWF4X2ZlYXR1cmVzLGVtYmVkZGluZ19kaW1zLGNsYXNzX251bT0zLGxhc3RfYWN0aXZhdGlvbj0nc29mdG1heCcpOgogICAgICAgIHNlbGYubWF4bGVuID0gbWF4bGVuCiAgICAgICAgc2VsZi5tYXhfZmVhdHVyZXMgPSBtYXhfZmVhdHVyZXMKICAgICAgICBzZWxmLmVtYmVkZGluZ19kaW1zID0gZW1iZWRkaW5nX2RpbXMKICAgICAgICBzZWxmLmNsYXNzX251bSA9IGNsYXNzX251bQogICAgICAgIHNlbGYubGFzdF9hY3RpdmF0aW9uID0gbGFzdF9hY3RpdmF0aW9uCiMgICAgIGRlZiBnZXRfbW9kZWwoc2VsZik6CiMgICAgICAgICBlbWJlZGRpbmcgPSBJbnB1dCgoc2VsZi5tYXhsZW4sIHNlbGYuZW1iZWRkaW5nX2RpbXMsKSkgIyDovpPlhaXpooTorq3nu4PnmoTor43lkJHph48KIyAgICAgICAgIGNvbnZzID0gW10gCiMgICAgICAgICBmb3Iga2VybmVsX3NpemUgaW4gWzMsNCw1XTogI+iuvuWummZpbHRlcuWkp+WwjwojICAgICAgICAgICAgIGMgPSBDb252MUQoMTI4LGtlcm5lbF9zaXplLGFjdGl2YXRpb249J3JlbHUnKShlbWJlZGRpbmcpCiMgICAgICAgICAgICAgYyA9IEdsb2JhbE1heFBvb2xpbmcxRCgpKGMpCiMgICAgICAgICAgICAgY29udnMuYXBwZW5kKGMpCiMgICAgICAgICB4ID0gQ29uY2F0ZW5hdGUoKShjb252cykKIyAgICAgICAgIG91dHB1dCA9IERlbnNlKHNlbGYuY2xhc3NfbnVtLGFjdGl2YXRpb249c2VsZi5sYXN0X2FjdGl2YXRpb24pKHgpCiMgICAgICAgICBtb2RlbCA9IE1vZGVsKGlucHV0cz1lbWJlZGRpbmcsb3V0cHV0cz1vdXRwdXQpCiMgICAgICAgICByZXR1cm4gbW9kZWwKICAgIAogICAgZGVmIGdldF9tb2RlbChzZWxmKToKICAgICAgICBlbWJlZGRpbmcgPSBJbnB1dCgoc2VsZi5tYXhsZW4sc2VsZi5lbWJlZGRpbmdfZGltcywpKQogICAgICAgIHggPSBCaWRpcmVjdGlvbmFsKExTVE0oMTI4LHJldHVybl9zZXF1ZW5jZXM9VHJ1ZSkpKGVtYmVkZGluZykKICAgICAgICB4ID0gQXR0ZW50aW9uKChzZWxmLm1heGxlbikpKHgpCiAgICAgICAgb3V0cHV0ID0gRGVuc2Uoc2VsZi5jbGFzc19udW0sYWN0aXZhdGlvbj1zZWxmLmxhc3RfYWN0aXZhdGlvbikoeCkKICAgICAgICBtb2RlbCA9IE1vZGVsKGVtYmVkZGluZyxvdXRwdXQpCiAgICAgICAgcmV0dXJuIG1vZGVsICAgICAgICAKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGB0b2tlbml6ZXIgPSBUb2tlbml6ZXIoKQp0b2tlbml6ZXIuZml0X29uX3RleHRzKGRmWyd0eHQnXS52YWx1ZXMpCnZvY2FiID0gdG9rZW5pemVyLndvcmRfaW5kZXgKbGVuKHZvY2FiKSsxCmApKSxtZHgoImgzIix7ImlkIjoi6K6+572u5qih5Z6L5Y+C5pWwIn0sYOiuvue9ruaooeWei+WPguaVsGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBtYXhsZW4gPSA0MApiYXRjaF9zaXplID0gMzIKbWF4X2ZlYXR1cmVzID0gbGVuKHZvY2FiKSsxCmVtYmVkZGluZ19kaW1zID0gMTAyNAplcG9jaHMgPSA5CmApKSxtZHgoImgzIix7ImlkIjoi6I635Y+W5qih5Z6LIn0sYOiOt+WPluaooeWei2ApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBtb2RlbCA9IEVMTU9UZXh0QmlSTk4obWF4bGVuLG1heF9mZWF0dXJlcyxlbWJlZGRpbmdfZGltcykuZ2V0X21vZGVsKCkKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBwbG90X21vZGVsKG1vZGVsLHNob3dfc2hhcGVzPVRydWUpCmApKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIuLi9pbWcvYXR0ZW50aW9uL291dHB1dF80N18wLnBuZyIsImFsdCI6InBuZyJ9KSkpLG1keCgiaDIiLHsiaWQiOiLliJLliIborq3nu4Ppm4bmtYvor5Xpm4YifSxg5YiS5YiG6K6t57uD6ZuGLOa1i+ivlembhmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGB4X3RyYWluLHhfdGVzdCx5X3RyYWluLHlfdGVzdCA9IHRyYWluX3Rlc3Rfc3BsaXQoZGZbJ3R4dCddLnZhbHVlcyxkZlsnbGFiZWwnXSkKYCkpLG1keCgiaDIiLHsiaWQiOiLlu7rnq4vor43lhbjor43or61pZOWMluagh+etvueLrOeDree8lueggSJ9LGDlu7rnq4vor43lhbgs6K+N6K+taWTljJYs5qCH562+54us54Ot57yW56CBYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYGRlZiBlbmNvZGVfY2F0ZWdvcnlfb25lX2hvdCh5X3RyYWluLHlfdGVzdCk6IAogICAgZnJvbSB0ZW5zb3JmbG93LmtlcmFzLnV0aWxzIGltcG9ydCB0b19jYXRlZ29yaWNhbAogICAgc2V0KHlfdHJhaW4pCiAgICBjYXRlZ29yaWVzID0gc2V0KHlfdHJhaW4pCiAgICBjYXRlZ29yaWVzCiAgICBjYXRfdG9faWQgPSBkaWN0KHppcChjYXRlZ29yaWVzLCByYW5nZShsZW4oY2F0ZWdvcmllcykpKSkKICAgIHlfdHJhaW5faWQgPSBbY2F0X3RvX2lkW2ldIGZvciBpIGluIHlfdHJhaW5dCiAgICB5X3Rlc3RfaWQgPSBbY2F0X3RvX2lkW2ldIGZvciBpIGluIHlfdGVzdF0KICAgIGNhdF90b19pZAogICAgeV90cmFpbl9vbmVfaG90ID0gdG9fY2F0ZWdvcmljYWwoeV90cmFpbl9pZCkKICAgIHlfdGVzdF9vbmVfaG90ID0gdG9fY2F0ZWdvcmljYWwoeV90ZXN0X2lkKQogICAgcmV0dXJuIHlfdHJhaW5fb25lX2hvdCx5X3Rlc3Rfb25lX2hvdCxjYXRfdG9faWQKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGB5X3RyYWluX29uZV9ob3QseV90ZXN0X29uZV9ob3QsY2F0X3RvX2lkID0gZW5jb2RlX2NhdGVnb3J5X29uZV9ob3QoeV90cmFpbix5X3Rlc3QpCmApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgeF90cmFpbiA9IHNlbnRlbmNlc19saXN0KHhfdHJhaW4pCnhfdGVzdCA9IHNlbnRlbmNlc19saXN0KHhfdGVzdCkKYCkpLG1keCgiaDIiLHsiaWQiOiLorr7nq4vml6nlgZwifSxg6K6+56uL5pep5YGcYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYG15X2NhbGxiYWNrcyA9IFtNb2RlbENoZWNrcG9pbnQoJy5FTE1PX2Jpcm5uX21vZGVsLmg1JyksCiAgICAgICAgICAgICAgICBFYXJseVN0b3BwaW5nKG1vbml0b3I9J2FjY3VyYWN5JyxwYXRpZW5jZT0yLG1vZGU9J21heCcpXQpgKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksYG1vZGVsID0gRUxNT1RleHRCaVJOTig0MCxtYXhfZmVhdHVyZXMsMTAyNCkuZ2V0X21vZGVsKCkKbW9kZWwuY29tcGlsZSgnYWRhbScsJ2NhdGVnb3JpY2FsX2Nyb3NzZW50cm9weScsbWV0cmljcz1bJ2FjY3VyYWN5J10pCmApKSxtZHgoImgyIix7ImlkIjoi5rWL6K+V5qih5Z6LIn0sYOa1i+ivleaooeWei2ApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGB0ZXh0ID0gJ+S7iuWkqSDlpKnmsJQg5b6IIOaZtOaclyDlpITlpIQg5pyJIOmYs+WFiSDmnIkg6Ziz5YWJJwpzZW50ZW5jZSA9IFtbJyVzJyV0ZXh0XV0KYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHl0aG9uIn0pLGBjYXRfdG9faWQKYCkpLG1keCgicCIsbnVsbCxgICB7J+i0n+ivhCc6IDAsICfmraPor4QnOiAxLCAn5Lit6K+EJzogMn1gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgc2VudGVuY2UKYCkpLG1keCgicCIsbnVsbCxgW2AsYFsn5LuK5aSpIOWkqeawlCDlvogg5pm05pyXIOWkhOWkhCDmnIkg6Ziz5YWJIOaciSDpmLPlhYknXWAsYF1gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSxgbW9kZWwucHJlZGljdF9nZW5lcmF0b3IocHJlZGljdF9nZW5lcmF0b3Ioc2VudGVuY2UsIGJhdGNoX3NpemU9MSksc3RlcHM9MSkKYCkpLG1keCgicCIsbnVsbCxgYXJyYXkoW2AsYFswLjIxNTYxMTA3LCAwLjYwMDk3NCAgLCAwLjE4MzQxNDk0XWAsYF0sIGR0eXBlPWZsb2F0MzIpYCkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/flybird/Desktop/my-website/my_web/blog/2020-3-19-attention.md"],"names":["React","mdx","frontMatter","id","title","author","author_title","author_url","author_image_url","tags","metadata","rightToc","value","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'Attention',\n\ttitle: '双向注意力LSTM神经网络',\n\tauthor: '招晓贤',\n\tauthor_title: 'AI Engineer',\n\tauthor_url: 'https://github.com/flybirdgroup',\n\tauthor_image_url: 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1615738601,1434436036&fm=26&gp=0.jpg',\n\ttags: [\n\t\t'CNN',\n\t\t'classifier',\n\t\t'textCNN'\n\t]\n};\nexport const metadata = {\n  \"permalink\": \"/blog/Attention\",\n  \"source\": \"@site/blog/2020-3-19-attention.md\",\n  \"description\": \"## 原理讲解\",\n  \"date\": \"2020-03-18T16:00:00.000Z\",\n  \"tags\": [\n    {\n      \"label\": \"CNN\",\n      \"permalink\": \"/blog/tags/cnn\"\n    },\n    {\n      \"label\": \"classifier\",\n      \"permalink\": \"/blog/tags/classifier\"\n    },\n    {\n      \"label\": \"textCNN\",\n      \"permalink\": \"/blog/tags/text-cnn\"\n    }\n  ],\n  \"title\": \"双向注意力LSTM神经网络\",\n  \"truncated\": true,\n  \"prevItem\": {\n    \"title\": \"Create Virtual Linux by Google 创建linux虚拟机\",\n    \"permalink\": \"/blog/createlinux\"\n  },\n  \"nextItem\": {\n    \"title\": \"word2vec详解\",\n    \"permalink\": \"/blog/elmo\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: '原理讲解',\n  id: '原理讲解',\n  children: []\n}, {\n  value: '细看结构',\n  id: '细看结构',\n  children: [{\n    value: '输入层',\n    id: '输入层',\n    children: []\n  }, {\n    value: 'Bi-LSTM',\n    id: 'bi-lstm',\n    children: []\n  }]\n}, {\n  value: '打乱样本',\n  id: '打乱样本',\n  children: []\n}, {\n  value: '技术路线',\n  id: '技术路线',\n  children: []\n}, {\n  value: '查看是否有缺失值',\n  id: '查看是否有缺失值',\n  children: []\n}, {\n  value: '分析标签数据情况',\n  id: '分析标签数据情况',\n  children: [{\n    value: '查看每个文本的长度',\n    id: '查看每个文本的长度',\n    children: []\n  }]\n}, {\n  value: '得到句子长度',\n  id: '得到句子长度',\n  children: []\n}, {\n  value: 'jieba分词',\n  id: 'jieba分词',\n  children: []\n}, {\n  value: '获取停用词和设立分词函数',\n  id: '获取停用词和设立分词函数',\n  children: []\n}, {\n  value: '建立模型',\n  id: '建立模型',\n  children: [{\n    value: 'Attention网络',\n    id: 'attention网络',\n    children: []\n  }, {\n    value: '网络结构',\n    id: '网络结构',\n    children: []\n  }, {\n    value: 'elmo层',\n    id: 'elmo层',\n    children: []\n  }, {\n    value: '创建padding函数',\n    id: '创建padding函数',\n    children: []\n  }, {\n    value: '创建批量生成器',\n    id: '创建批量生成器',\n    children: []\n  }, {\n    value: '构建ELMOTextBiRNN网络结构',\n    id: '构建elmotextbirnn网络结构',\n    children: []\n  }, {\n    value: '设置模型参数',\n    id: '设置模型参数',\n    children: []\n  }, {\n    value: '获取模型',\n    id: '获取模型',\n    children: []\n  }]\n}, {\n  value: '划分训练集,测试集',\n  id: '划分训练集测试集',\n  children: []\n}, {\n  value: '建立词典,词语id化,标签独热编码',\n  id: '建立词典词语id化标签独热编码',\n  children: []\n}, {\n  value: '设立早停',\n  id: '设立早停',\n  children: []\n}, {\n  value: '测试模型',\n  id: '测试模型',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"原理讲解\"\n    }}>{`原理讲解`}</h2>\n    <p>{`TextAttBiRNN是在双向LSTM文本分类模型的基础上改进的，主要是引入了注意力机制（Attention）。对于双向LSTM编码得到的表征向量，模型能够通过注意力机制，关注与决策最相关的信息。其中注意力机制最先在论文 `}<a parentName=\"p\" {...{\n        \"href\": \"https://arxiv.org/pdf/1409.0473.pdf\"\n      }}>{`Neural Machine Translation by Jointly Learning to Align and Translate`}</a>{` 中被提出，而此处对于注意力机制的实现参照了论文 `}<a parentName=\"p\" {...{\n        \"href\": \"https://arxiv.org/pdf/1512.08756.pdf\"\n      }}>{`Feed-Forward Networks with Attention Can Solve Some Long-Term Memory Problems`}</a>{`。`}</p>\n    {\n      /*truncate*/\n    }\n    <p>{`注意力机制参考`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://zhuanlan.zhihu.com/p/37601161\"\n        }}>{`深度学习中的注意力模型`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://zhuanlan.zhihu.com/p/53036028\"\n        }}>{`深度学习注意力机制`}</a></li>\n    </ul>\n    <p>{`请注意,这里的注意力机制与bert中transformer的注意力机制不同,transformer会更加复杂,大家可以参考我关于`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/weijiang2009/URun.ResearchPrototype/tree/dev/People/Xiaoxian/NLP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/Transformer%E7%AC%94%E8%AE%B0\"\n      }}>{`transformer`}</a></p>\n    <p>{`In the paper `}<a parentName=\"p\" {...{\n        \"href\": \"https://arxiv.org/pdf/1512.08756.pdf\"\n      }}>{`Feed-Forward Networks with Attention Can Solve Some Long-Term Memory Problems`}</a>{`, the `}<strong parentName=\"p\">{`feed forward attention`}</strong>{` is simplified as follows,\n`}<img parentName=\"p\" {...{\n        \"src\": \"../img/attention/FeedForwardAttention.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <p>{`Function a, a learnable function, is recognized as a feed forward network. In this formulation, attention can be seen as producing a fixed-length embedding c of the input sequence by computing an adaptive weighted average of the state sequence h.`}</p>\n    <p>{`c就是注意力,alpha就是权重,h就是隐含状态,alpha通过softmax计算,score就是通过h计算的,h就是当前状态输入的词语和上一隐含状态ht-1计算而来的`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../img/attention/FeedForwardAttetion_fomular.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"细看结构\"\n    }}>{`细看结构`}</h2>\n    <p>{`TextAttBiRNN 的网络结构\n`}<img parentName=\"p\" {...{\n        \"src\": \"../img/attention/text-attn-birnn.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"输入层\"\n    }}>{`输入层`}</h3>\n    <p>{`输入层我们可以定义为句子输入长度，每个词经过一个embedding_dim=50的embedding矩阵，最终输出400×50的表示矩阵.假设一个句子有400个词语`}</p>\n    <h3 {...{\n      \"id\": \"bi-lstm\"\n    }}>{`Bi-LSTM`}</h3>\n    <p>{`Bi-LSTM层作为一种特征编码层，这层可以提取每个词语的上下文特征，然后将双向的特征进行拼接，然后依旧将每个词语的特征进行输出，因此输出为400×256的特征矩阵`}</p>\n    <p>{`Attention层\nAttention层对这个网络中对每个词语进行了加权求和，这个权重是通过训练不断训练出来的，这层我们的输入x为400×256，我们初始化权重矩阵W为256×1维，然后对x与W进行点乘、归一化（公式的前两个），这样就可以得到400×1的矩阵a，这个矩阵代表的是每个词对应的权重，权重大的词代表注意力大的，这个词的贡献程度更大，最后对每个词语进行加权平均，aT与x进行点乘，得到1×256，这是最终加权平均后输出的总特征向量。`}</p>\n    <p>{`输出层\n与我之前textCNN做中文新闻分类实验差不多，使用全连接层，softmax作为激活函数进行输出。`}</p>\n    <p>{`demo项目: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/flybirdgroup/sentiment_analysis\"\n      }}>{`情感分析`}</a></p>\n    <h1 {...{\n      \"id\": \"导入工具包\"\n    }}>{`导入工具包`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import pandas as pd\nimport jieba_fast as jieba\nfrom tensorflow.keras.layers import Layer\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import initializers,regularizers,constraints\nfrom tensorflow.keras import Input,Model,models\nfrom tensorflow.keras.layers import Embedding, Dense, Conv1D, GlobalMaxPooling1D, Concatenate, Dropout\nfrom tensorflow.keras import Input,Model\nfrom tensorflow.keras.layers import Embedding,Dropout,Dense,Bidirectional,LSTM\nfrom tensorflow.keras.models import load_model\nfrom elmoformanylangs import Embedder\nimport numpy as np\nfrom tensorflow.keras.utils import plot_model\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom pandarallel import pandarallel\npandarallel.initialize()\nfrom tensorflow.keras.preprocessing.text import Tokenizer\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"读取数据\"\n    }}>{`读取数据`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df = pd.read_csv('./data/sentiment_analysis_data.csv',sep=' ')\ndf\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../img/attention/1.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"打乱样本\"\n    }}>{`打乱样本`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df = df.sample(frac=1).reset_index(drop=True)\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"建模思路\"\n    }}>{`建模思路`}</h1>\n    <h2 {...{\n      \"id\": \"技术路线\"\n    }}>{`技术路线`}</h2>\n    <p>{`分两种种情况,好评,负评,中评\n计算路线:\n1 使用TextCNN对每个句子类似n-gram处理`}</p>\n    <p>{`2 使用RNN`}</p>\n    <p>{`3 可以尝试使用attention机制做情感判断,对词进行word2vec,或者elmo embedding,可添加bi-lstm获取上下文信息`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.xn--gmqr38alogxt2a.net/blog/Attention\"\n      }}>{`Attention原理请参考`}</a></p>\n    <h2 {...{\n      \"id\": \"查看是否有缺失值\"\n    }}>{`查看是否有缺失值`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df.info()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"分析标签数据情况\"\n    }}>{`分析标签数据情况`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`label_dict = {'-1':'负评','0':'中评','1':'正评'}\n\ndf['label']=df['label'].apply(lambda x: label_dict[str(x)] )\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df.tail()\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../img/attention/2.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"查看每个文本的长度\"\n    }}>{`查看每个文本的长度`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df['txt_num'] = df['txt'].agg(lambda x: len(x))\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df.agg({'txt_num':'mean'})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"得到句子长度\"\n    }}>{`得到句子长度`}</h2>\n    <p>{`所以根据数据,得出我们会设置maxlen= 40左右`}</p>\n    <h2 {...{\n      \"id\": \"jieba分词\"\n    }}>{`jieba分词`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`from pandarallel import pandarallel\npandarallel.initialize()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"获取停用词和设立分词函数\"\n    }}>{`获取停用词和设立分词函数`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`stopwords = pd.read_csv('./data/stopwords.txt',sep='\\\\t',index_col=False,quoting=3,encoding='utf-8')\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def split_words(X):\n    result = [i for i in jieba.lcut(X) if i not in stopwords]\n    result = ' '.join(result)\n    return result\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`df['txt']=df['txt'].parallel_apply(split_words)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"建立模型\"\n    }}>{`建立模型`}</h2>\n    <h3 {...{\n      \"id\": \"attention网络\"\n    }}>{`Attention网络`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight(shape=(input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight(shape=(input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n    \n    def compute_mask(self,input,input_mask=None):\n        #do not pass the mask to the next layers\n        return None\n    \n    def call(self,x,mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n        \n        #K.reshape(x,(-1,features_dim))里面-1可以想象成一行,features_dim变成一行有features_dim维矩阵(1*dim维),K.reshape(self.W, (features_dim, 1)),变成矩阵(dim维*self.W)features_dim行和1维\n        e = K.reshape(K.dot(K.reshape(x, (-1, features_dim)), K.reshape(self.W, (features_dim, 1))), (-1, step_dim))  \n        # 这里也可以用另外一种表示方式\n#         e = K.reshape(K.dot(K.reshape(x,(1,-1)),K.reshape(self.W,(-1,1))),(-1,1))\n        # 其实就是全连接的矩阵相乘 e = K.dot(x, self.W)\n        if self.bias:\n            e += self.b\n        e = K.tanh(e) # 激活函数\n        a = K.exp(e) # 去指数\n        # apply mask after the exp. will be re-normalized next\n        if mask is not None:\n            # cast the mask to floatX to avoid float64 upcasting in theano\n            a *= K.cast(mask, K.floatx()) # 转换成floatx类型\n        # in some cases especially in the early stages of training the sum may be almost zero\n        # and this results in NaN's. A workaround is to add a very small positive number ε to the sum.\n        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx()) # softmax函数,得到权重矩阵\n        a = K.expand_dims(a) # 变成(dim,1),这样可以与x进行加权就和得到context\n        \n        c = K.sum(a*x,axis=1) #权重与hidden信息加权就和得到context,也就是我们的注意力\n        return c\n    def compute_output_shape(self, input_shape):\n        return input_shape[0], self.features_dim  \n    \n    def get_config(self):\n        config = {\n                \"step_dim\":self.step_dim,\n                 \"W_regularizer\":self.W_regularizer, \"b_regularizer\":self.b_regularizer,\n                 \"W_constraint\":self.W_constraint, \"b_constraint\":self.b_constraint,\n                 \"bias\":self.bias}\n        base_config = super(Attention, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"网络结构\"\n    }}>{`网络结构`}</h3>\n    <h3 {...{\n      \"id\": \"elmo层\"\n    }}>{`elmo层`}</h3>\n    <p>{`哈工大开发的动态词向量`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/HIT-SCIR/ELMoForManyLangs\"\n      }}>{`elmo`}</a></p>\n    <p>{`elmo原理可参考`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jianshu.com/p/2fff53696fac\"\n      }}>{`链接`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`e = Embedder('./zhs.model/')\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"创建padding函数\"\n    }}>{`创建padding函数`}</h3>\n    <p>{`超过句子长度就截取,不够就补空`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def pad_sent(x, max_len):\n    if len(x)>max_len:\n        return x[:max_len]\n    else:\n        return x+['']*(max_len-len(x))\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"创建批量生成器\"\n    }}>{`创建批量生成器`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def batch_generator(x, y, batch_size=64):\n    n_batches_per_epoch = len(x)//batch_size\n    for i in range(n_batches_per_epoch):\n        x_batch = np.array(e.sents2elmo([pad_sent(sent,40) for sent in x[batch_size*i:batch_size*(i+1)]]))\n        y_batch = y[batch_size*i:batch_size*(i+1),:]\n        yield x_batch, np.array(y_batch)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def predict_generator(x, batch_size=1): #预测\n    n_batches_per_epoch = len(x)//batch_size\n    for i in range(n_batches_per_epoch):\n        x_batch = np.array(e.sents2elmo([pad_sent(sent,40) for sent in x[batch_size*i:batch_size*(i+1)]]))\n        yield x_batch\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"构建elmotextbirnn网络结构\"\n    }}>{`构建ELMOTextBiRNN网络结构`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class ELMOTextBiRNN(object):\n    def __init__(self,maxlen,max_features,embedding_dims,class_num=3,last_activation='softmax'):\n        self.maxlen = maxlen\n        self.max_features = max_features\n        self.embedding_dims = embedding_dims\n        self.class_num = class_num\n        self.last_activation = last_activation\n#     def get_model(self):\n#         embedding = Input((self.maxlen, self.embedding_dims,)) # 输入预训练的词向量\n#         convs = [] \n#         for kernel_size in [3,4,5]: #设定filter大小\n#             c = Conv1D(128,kernel_size,activation='relu')(embedding)\n#             c = GlobalMaxPooling1D()(c)\n#             convs.append(c)\n#         x = Concatenate()(convs)\n#         output = Dense(self.class_num,activation=self.last_activation)(x)\n#         model = Model(inputs=embedding,outputs=output)\n#         return model\n    \n    def get_model(self):\n        embedding = Input((self.maxlen,self.embedding_dims,))\n        x = Bidirectional(LSTM(128,return_sequences=True))(embedding)\n        x = Attention((self.maxlen))(x)\n        output = Dense(self.class_num,activation=self.last_activation)(x)\n        model = Model(embedding,output)\n        return model        \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`tokenizer = Tokenizer()\ntokenizer.fit_on_texts(df['txt'].values)\nvocab = tokenizer.word_index\nlen(vocab)+1\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"设置模型参数\"\n    }}>{`设置模型参数`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`maxlen = 40\nbatch_size = 32\nmax_features = len(vocab)+1\nembedding_dims = 1024\nepochs = 9\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"获取模型\"\n    }}>{`获取模型`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`model = ELMOTextBiRNN(maxlen,max_features,embedding_dims).get_model()\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`plot_model(model,show_shapes=True)\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../img/attention/output_47_0.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"划分训练集测试集\"\n    }}>{`划分训练集,测试集`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`x_train,x_test,y_train,y_test = train_test_split(df['txt'].values,df['label'])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"建立词典词语id化标签独热编码\"\n    }}>{`建立词典,词语id化,标签独热编码`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def encode_category_one_hot(y_train,y_test): \n    from tensorflow.keras.utils import to_categorical\n    set(y_train)\n    categories = set(y_train)\n    categories\n    cat_to_id = dict(zip(categories, range(len(categories))))\n    y_train_id = [cat_to_id[i] for i in y_train]\n    y_test_id = [cat_to_id[i] for i in y_test]\n    cat_to_id\n    y_train_one_hot = to_categorical(y_train_id)\n    y_test_one_hot = to_categorical(y_test_id)\n    return y_train_one_hot,y_test_one_hot,cat_to_id\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`y_train_one_hot,y_test_one_hot,cat_to_id = encode_category_one_hot(y_train,y_test)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`x_train = sentences_list(x_train)\nx_test = sentences_list(x_test)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"设立早停\"\n    }}>{`设立早停`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`my_callbacks = [ModelCheckpoint('.ELMO_birnn_model.h5'),\n                EarlyStopping(monitor='accuracy',patience=2,mode='max')]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`model = ELMOTextBiRNN(40,max_features,1024).get_model()\nmodel.compile('adam','categorical_crossentropy',metrics=['accuracy'])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"测试模型\"\n    }}>{`测试模型`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`text = '今天 天气 很 晴朗 处处 有 阳光 有 阳光'\nsentence = [['%s'%text]]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`cat_to_id\n`}</code></pre>\n    <p>{`  {'负评': 0, '正评': 1, '中评': 2}`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`sentence\n`}</code></pre>\n    <p>{`[`}{`['今天 天气 很 晴朗 处处 有 阳光 有 阳光']`}{`]`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`model.predict_generator(predict_generator(sentence, batch_size=1),steps=1)\n`}</code></pre>\n    <p>{`array([`}{`[0.21561107, 0.600974  , 0.18341494]`}{`], dtype=float32)`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}